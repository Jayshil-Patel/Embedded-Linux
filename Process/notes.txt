process -> PID (process ID)(Given by OS)
each process have its own PCB -> Process control block
PCB have section 
    1):- code memory
    2):- data memory
    3):- stack memory
    4):- program counter
    5):- stack pointer
if you run a program helloworld.c it will be converted to a process
it will then have PID , and once it have PID, it will have its own PCB.

once you hit sleep 100 it will generate a process
this process will have its PID
and to kill it you can use interrupts or kill commands
and now the process will not have PID or PCB
and the process will disappear form the list(ps -el/ ps -a)

fork() is a system call, used to create a process
it returns int (int id ; id = fork();)
whenever this code is executed new process will start

The process which makes process is called "Parent Process"
The new process made from parent process is called "Child process"

The child process will have its own PID and PCB of parent will be copied to child

The child process can make its own child, and the PID of grandchild will be passed to child

both child and parent will share same memory same (code memory)

If we kill the parent the parent will be terminated, and PPID(Parent PID) of child will be changed, 
and child will keep on running

This type of process is called orphan process.

now the child will be taken care by system.

"systemd" is responsible for taking care of child, this is known as god process.

Now if you kill child the child will keep on running, to shut him down you have to close the terminal

coming out of this example, with both parent and child alive, if you kill the child 
you can see the output of parent and not of child, but it will still be considered as a process in "ps -el" 
and shown as <defunct> this is example of zombie process. Killed child process will be not running in
foreground but it will still be running in background

to remove the zombie child completely we must kill the parent.